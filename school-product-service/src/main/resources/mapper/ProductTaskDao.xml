<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itlin.product.dao.ProductTaskDao">

    <resultMap type="com.itlin.product.entity.ProductTask" id="ProductTaskMap">
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="productId" column="product_id" jdbcType="INTEGER"/>
        <result property="buyNum" column="buy_num" jdbcType="INTEGER"/>
        <result property="productName" column="product_name" jdbcType="VARCHAR"/>
        <result property="lockState" column="lock_state" jdbcType="VARCHAR"/>
        <result property="outTradeNo" column="out_trade_no" jdbcType="VARCHAR"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <!--查询单个-->
    <select id="queryById" resultMap="ProductTaskMap">
        select
          id, product_id, buy_num, product_name, lock_state, out_trade_no, create_time
        from product_task
        where id = #{id}
    </select>

    <!--查询指定行数据-->
    <select id="queryAllByLimit" resultMap="ProductTaskMap">
        select
          id, product_id, buy_num, product_name, lock_state, out_trade_no, create_time
        from product_task
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="productId != null">
                and product_id = #{productId}
            </if>
            <if test="buyNum != null">
                and buy_num = #{buyNum}
            </if>
            <if test="productName != null and productName != ''">
                and product_name = #{productName}
            </if>
            <if test="lockState != null and lockState != ''">
                and lock_state = #{lockState}
            </if>
            <if test="outTradeNo != null and outTradeNo != ''">
                and out_trade_no = #{outTradeNo}
            </if>
            <if test="createTime != null">
                and create_time = #{createTime}
            </if>
        </where>
        limit #{pageable.offset}, #{pageable.pageSize}
    </select>

    <!--统计总行数-->
    <select id="count" resultType="java.lang.Long">
        select count(1)
        from product_task
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="productId != null">
                and product_id = #{productId}
            </if>
            <if test="buyNum != null">
                and buy_num = #{buyNum}
            </if>
            <if test="productName != null and productName != ''">
                and product_name = #{productName}
            </if>
            <if test="lockState != null and lockState != ''">
                and lock_state = #{lockState}
            </if>
            <if test="outTradeNo != null and outTradeNo != ''">
                and out_trade_no = #{outTradeNo}
            </if>
            <if test="createTime != null">
                and create_time = #{createTime}
            </if>
        </where>
    </select>

    <!--新增所有列-->
    <insert id="insert" keyProperty="id" useGeneratedKeys="true">
        insert into product_task(product_id, buy_num, product_name, lock_state, out_trade_no, create_time)
        values (#{productId}, #{buyNum}, #{productName}, #{lockState}, #{outTradeNo}, #{createTime})
    </insert>

    <insert id="insertBatch" keyProperty="id" useGeneratedKeys="true">
        insert into product_task(product_id, buy_num, product_name, lock_state, out_trade_no, create_time)
        values
        <foreach collection="entities" item="entity" separator=",">
        (#{entity.productId}, #{entity.buyNum}, #{entity.productName}, #{entity.lockState}, #{entity.outTradeNo}, #{entity.createTime})
        </foreach>
    </insert>

    <insert id="insertOrUpdateBatch" keyProperty="id" useGeneratedKeys="true">
        insert into product_task(product_id, buy_num, product_name, lock_state, out_trade_no, create_time)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.productId}, #{entity.buyNum}, #{entity.productName}, #{entity.lockState}, #{entity.outTradeNo}, #{entity.createTime})
        </foreach>
        on duplicate key update
        product_id = values(product_id),
        buy_num = values(buy_num),
        product_name = values(product_name),
        lock_state = values(lock_state),
        out_trade_no = values(out_trade_no),
        create_time = values(create_time)
    </insert>
    <insert id="lock"  parameterType="com.itlin.product.entity.ProductTask" useGeneratedKeys="true" keyProperty="id">

       INSERT INTO `product_task`( `product_id`, `buy_num`, `product_name`, `lock_state`, `out_trade_no`, `create_time`)
        VALUES ( #{productId}, #{buyNum}, #{productName}, #{lockState}, #{outTradeNo}, #{createTime});
    </insert>

    <!--通过主键修改数据-->
    <update id="update">
        update product_task
        <set>
            <if test="productId != null">
                product_id = #{productId},
            </if>
            <if test="buyNum != null">
                buy_num = #{buyNum},
            </if>
            <if test="productName != null and productName != ''">
                product_name = #{productName},
            </if>
            <if test="lockState != null and lockState != ''">
                lock_state = #{lockState},
            </if>
            <if test="outTradeNo != null and outTradeNo != ''">
                out_trade_no = #{outTradeNo},
            </if>
            <if test="createTime != null">
                create_time = #{createTime},
            </if>
        </set>
        where id = #{id}
    </update>

    <!--通过主键删除-->
    <delete id="deleteById">
        delete from product_task where id = #{id}
    </delete>

</mapper>

